"""
–ú–æ–¥—É–ª—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Wandrly.

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–æ —Ä–µ–π—Å–∞—Ö Ryanair. –û–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∞ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö,
–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–∏—Å—Ç—É—é, —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.
"""

import json
import os
import requests
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–∏
from datetime import datetime, timedelta
from typing import List, Dict, Any, Tuple

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---

# –°–ø–∏—Å–æ–∫ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –≤—ã–ª–µ—Ç–∞ –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞)
IRISH_AIRPORTS = ["DUB", "SNN", "ORK", "NOC", "KIR"]

# –ö–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
UK_DEST_CODES = {
    "ABZ", "BFS", "BHD", "BHX", "BOH", "BRS", "CWL", "DSA", "DND",
    "EDI", "EMA", "EXT", "GLA", "HUY", "INV", "LBA", "LDY", "LGW",
    "LPL", "LTN", "MAN", "NCL", "NQY", "PIK", "SEN", "SOU", "STN"
}

# --- –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_DIR = "/Users/sergishatukh/Documents/Scripts/Training/Ryanair Deals Script"

# API –∏ —Ñ–∞–π–ª—ã –∫—ç—à–∞
ROUTES_API_URL = "https://www.ryanair.com/api/views/locate/3/routes"
AIRPORTS_INFO_API_URL = "https://api.ryanair.com/aggregate/3/common?market=en-gb"
FARES_MONTHLY_API_URL = "https://www.ryanair.com/api/farfnd/v4/oneWayFares/{origin}/{destination}/cheapestPerDay"

# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
ROUTES_FILE = os.path.join(PROJECT_DIR, "routes.json")
AIRPORTS_INFO_FILE = os.path.join(PROJECT_DIR, "airports_info.json")
REQUEST_TIMEOUT = 15


# --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò (–î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•) ---

def get_all_routes() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã Ryanair –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ API."""
    if os.path.exists(ROUTES_FILE):
        with open(ROUTES_FILE, "r") as f: return json.load(f)
    try:
        r = requests.get(ROUTES_API_URL, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        routes = r.json()
        with open(ROUTES_FILE, "w") as f:
            json.dump(routes, f, indent=2)
        return routes
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã: {e}")
        return []


def get_airport_details() -> Tuple[Dict[str, str], Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω."""
    airport_map, airport_to_country_map = {}, {}
    if os.path.exists(AIRPORTS_INFO_FILE):
        with open(AIRPORTS_INFO_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª airports_info.json. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π.")
        return {}, {}
    country_map = {c['code']: c['name'] for c in data.get('countries', [])}
    for airport in data.get('airports', []):
        iata, city, country_code = airport.get("iataCode"), airport.get("name"), airport.get("countryCode")
        if iata and city and country_code:
            country_name = country_map.get(country_code, country_code)
            airport_map[iata] = f"{city}, {country_name}"
            airport_to_country_map[iata] = country_name
    return airport_map, airport_to_country_map


def get_destinations_from(origin: str, all_routes: List[Dict[str, Any]]) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, –∏—Å–∫–ª—é—á–∞—è UK –∏ –ò—Ä–ª–∞–Ω–¥–∏—é."""
    destinations = set()
    for route in all_routes:
        if route.get("airportFrom") == origin:
            dest_code = route.get("airportTo")
            if dest_code and dest_code not in UK_DEST_CODES and dest_code not in IRISH_AIRPORTS:
                destinations.add(dest_code)
    return sorted(list(destinations))


def get_monthly_fares(session: requests.Session, origin: str, destination: str, month: str) -> Dict[str, float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞."""
    url = FARES_MONTHLY_API_URL.format(origin=origin, destination=destination)
    params = {"outboundMonthOfDate": f"{month}-01", "currency": "EUR"}
    fares_by_date = {}
    try:
        r = session.get(url, params=params, timeout=REQUEST_TIMEOUT)
        if r.status_code != 200: return {}
        data = r.json()
        for day_fare in data.get("outbound", {}).get("fares", []):
            if day_fare.get("unavailable") or not day_fare.get("price"): continue
            fares_by_date[day_fare["day"]] = day_fare["price"]["value"]
        return fares_by_date
    except Exception:
        return {}


# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò ---

def find_deals(from_location: str, durations: List[int], horizon_days: int, max_price: float) -> List[Dict[str, Any]]:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤—ã—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ API: –ò–∑ '{from_location}', –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {durations}, –ì–æ—Ä–∏–∑–æ–Ω—Ç: {horizon_days} –¥–Ω–µ–π, –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price} EUR")
    
    all_routes = get_all_routes()
    airport_map, _ = get_airport_details()

    if not all_routes or not airport_map:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–µ—Ä—ã–≤–∞—é –ø–æ–∏—Å–∫.")
        return []

    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è from_location (—Å—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞).
    # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É: –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Ä–ª–∞–Ω–¥—Å–∫–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç, –∏—â–µ–º –∏–∑ –Ω–µ–≥–æ.
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –∏—â–µ–º –∏–∑ –≤—Å–µ—Ö –∏—Ä–ª–∞–Ω–¥—Å–∫–∏—Ö –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤.
    departure_airports = [from_location.upper()] if from_location.upper() in IRISH_AIRPORTS else IRISH_AIRPORTS

    today = datetime.today().date()
    date_pairs = []
    for day_offset in range(1, horizon_days + 1):
        dep_date = today + timedelta(days=day_offset)
        for duration in durations:
            ret_date = dep_date + timedelta(days=duration)
            date_pairs.append((dep_date, ret_date))

    found_trips = []
    monthly_fares_cache = {}

    with requests.Session() as session:
        for origin in departure_airports:
            destinations = get_destinations_from(origin, all_routes)
            for dest in destinations:
                for dep_date, ret_date in date_pairs:
                    dep_month_str, ret_month_str = dep_date.strftime('%Y-%m'), ret_date.strftime('%Y-%m')
                    dep_day_str, ret_day_str = dep_date.strftime('%Y-%m-%d'), ret_date.strftime('%Y-%m-%d')

                    outbound_cache_key = (origin, dest, dep_month_str)
                    if outbound_cache_key not in monthly_fares_cache:
                        monthly_fares_cache[outbound_cache_key] = get_monthly_fares(session, origin, dest, dep_month_str)

                    inbound_cache_key = (dest, origin, ret_month_str)
                    if inbound_cache_key not in monthly_fares_cache:
                        monthly_fares_cache[inbound_cache_key] = get_monthly_fares(session, dest, origin, ret_month_str)

                    out_price = monthly_fares_cache.get(outbound_cache_key, {}).get(dep_day_str)
                    back_price = monthly_fares_cache.get(inbound_cache_key, {}).get(ret_day_str)

                    if out_price is None or back_price is None: continue

                    total = out_price + back_price
                    if total <= max_price:
                        trip_info = {
                            "id": str(uuid.uuid4()),
                            "departureAirport": {
                                "code": origin,
                                "city": airport_map.get(origin, origin).split(',')[0].strip()
                            },
                            "arrivalAirport": {
                                "code": dest,
                                "city": airport_map.get(dest, dest).split(',')[0].strip()
                            },
                            "departureDate": dep_date.isoformat(),
                            "returnDate": ret_date.isoformat(),
                            "durationDays": (ret_date - dep_date).days,
                            "price": {
                                "value": round(total, 2),
                                "currency": "EUR"
                            }
                        }
                        found_trips.append(trip_info)
    
    print(f"üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(found_trips)}")

    return sorted(found_trips, key=lambda x: x['price']['value'])
